%implements s0_b0_ibhoc_Outputs "C"

%function Outputs(block, system) Output
%assign localVarDecl = ""
%openfile localVarDecl
uint32_T bpIdx;
real_T tmp;
%closefile localVarDecl
%<SLibCGIRAccessLocalVar(0, 0)> %% rtb_DiscreteFIRFilter3
%<SLibCGIRAccessLocalVar(1, 0)> %% rtb_DataTypeConversion

%assign tlcOutputsFcnOfS0B0 = OpaqueTLCBlockFcn("Outputs", 0, 0, 0, 2)
%assign tlcOutputsFcnOfS0B1 = OpaqueTLCBlockFcn("Outputs", 0, 1, 0, 2)
%assign tlcOutputsFcnOfS0B2 = OpaqueTLCBlockFcn("Outputs", 0, 2, 0, 2)
/* Sin: '<Root>/Sine Wave' */
samplingcircuit_B.SineWave = sin(samplingcircuit_P.SineWave_Freq * %<(SLibCG_SE(LibGetTaskTime(0)))> + samplingcircuit_P.SineWave_Phase) * samplingcircuit_P.SineWave_Amp + samplingcircuit_P.SineWave_Bias;
%<tlcOutputsFcnOfS0B0>\
/* Lookup_n-D: '<Root>/1-D Lookup Table' */
bpIdx = plook_u32d_bincka(samplingcircuit_B.SineWave, samplingcircuit_P.quantBreak, 8191U);
rtb_DiscreteFIRFilter3 = samplingcircuit_P.quantData[bpIdx];
/* DataTypeConversion: '<Root>/Data Type Conversion' */
tmp = floor(rtb_DiscreteFIRFilter3);
if (rtIsNaN(tmp) || rtIsInf(tmp)) {
    tmp = 0.0;
} else {
    tmp = fmod(tmp, 65536.0);
}
rtb_DataTypeConversion = (int16_T)(tmp < 0.0 ? (int32_T)(int16_T)-(int16_T)(uint16_T)-tmp : (int32_T)(int16_T)(uint16_T)tmp);
/* End of DataTypeConversion: '<Root>/Data Type Conversion' */
%<tlcOutputsFcnOfS0B1>\
/* DiscreteFir: '<Root>/Discrete FIR Filter3' */
rtb_DiscreteFIRFilter3 = %<(SLibCG_SE(SLibCG_Grnd(0, 0, 1, "", -1, "", 0)))> * samplingcircuit_P.DiscreteFIRFilter3_Coefficients[0] + samplingcircuit_DW.DiscreteFIRFilter3_states * samplingcircuit_P.DiscreteFIRFilter3_Coefficients[1];
%<tlcOutputsFcnOfS0B2>\
%<SLibInsertSolverResetCode()>\
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Outputs(\
%assign comma = ""
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(0, 2, fcnProtoType)>
%<LibSetSystemField(system, "CachedOutputLocalVars", localVarDecl)>
%endfunction
